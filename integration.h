//---------------------------------------------------------------------------

#ifndef integrationH
#define integrationH
//---------------------------------------------------------------------------
namespace chi {

//структура вектора для численного интегрирования
struct VECTOR{
	double r[3];	//радиус-вектор КА
	double v[3];	//вектор скорости КА
	double f[3];	//вектор правых частей (возмущающих ускорений)
	double t;		//время в секундах от момента времени T_NU
	double F[6][6];
	double dfdx[6][6];
	double F_[6][6];
};

/* Значения параметров для метода dph::EphemerisReelase::calculateBody(...).
   Данные значения соответствуют индексам тел, для которых можно получить
   результат вычислений. */
enum Body{
	B_EARTH   = 0,
	B_MOON    = 1,
	B_SUN     = 2,
};
/*Значения параметра для метода chi::integration::off_central_field(VECTOR rv)
  Данные значения определяют поряждок разложения гравитационного потенциала
  Земли*/
enum Harmonics{
	C20 = 0; /*вычисление по формулам второй зональной гармоники*/
	C40 = 1; /*вычисление по формулам четвертой зональной гармоники*/
	H32	= 2; /*вычисление разложения до порядка 32х32*/
}



class integration{

public:
	/* [СТАНДАРТНЫЕ МЕТОДЫ] */

	/*запись НУ*/
	void set_NU(double r[3], double v[3], double t);
	void set_NU(double rv[6],  double t);

	/*запись параметров интегрирования*/
	void setParametrs(double interval_, double step_);

	/*запись типа вычислений на каждом шаге интегрирования*/
	void setTypeCalculation(typeCalculation_);




	/* [МЕТОДЫ ЧИСЛЕННОГО ИНТЕГРИРОВАНИЯ] */

	/*Классический метод Рунге-Кутты 4-го порядка для обыкновенных дифференциальных уравнений 1-го порядка*/
	/*Метод Рунге-Кутты 4-го порядка для обыкновенных дифференциальных уравнений 2-го порядка*/
	/*Метод Рунге-Кутты-Мерсона 4-го порядка*/
	/*Метод Дормана-Принса 7-го порядка*/
	/*Метод Рунге-Кутты-Фельдберга 8-го порядка*/
	/*Метод Адамса-Башфорта-Мултона 8-го порядка*/
	/*Метод экстрополяции*/
	/**/


	/**/

//private:
protected:
	/*начальные условия интегрирования*/
	double r_nu[3];	//начальный радиус-вектор [км]
	double v_nu[3];	//начальный вектор скорости [км/с]
	double t_nu;	//начальный момент времени в формате юлианской даты (UTC)

	/*параметры численного интегрирования*/
	double interval;
	double step;

	/*настройки численного интегрирования*/
	unsigned harmonicType 	  /*признак учета типа расчитываемых гармоник:
								0 - разложение гравитационного потенциала:
									вторая зональная гармоника С20
								1 - разложение гравитационного потенциала:
									четвертая зональная гармоника С40
								2 - разложение гравитационного потенциала:
									порядок разложения до 32х32*/
	unsigned harmonicOrder    /*порядок разложения до 32х32*/
	bool planet[11]		/*признак учета гравитационных возмущений небесных тел:
						   0 - Меркурий
						   1 - Венера
						   2 - Земля
						   3 - Марс
						   4 - Юпитер
						   5 - Сатурн
						   6 - Уран
						   7 - Нептун
						   8 - Плутон
						   9 - Луна
						  10 - Солнце */


	unsigned calculeteMatrix; /*признак расчета матрицы частных производных*/
	unsigned rp[5];	/*признак учета возмущений:
					  rp[0] - учет центрального гравитационного поля
					  rp[1] - учет нецентральности гравитационного поля
					  rp[2] - учет небесных тел Солнечной системы
					  rp[3] - учет
					  rp[4] - учет атмосферы
					  rp[5] - учет тяги двигательной установки*/

	/*Настройка типа вычислений на каждом шаге интегрирования*/
	unsigned typeCalculation;
	/* [ВЫЧИСЛЕНИЯ НА КАЖДОМ ШАГЕ ИНТЕГРИРОВАНИЯ] */



	/*векторы ускорений: */
	double a_central_fild[3];      /*ускорение обусловленное действием
									 центрального гравитационного поля*/
	double a_off_central_fild[3];  /*ускорение обусловленное действием
									 нецентральностью гравитационного поля*/
	double a_celestial_bodies[3];  /*ускорение обусловленное действием
									 небесных тел Солнечной системы*/
	double a_solar_radiation[3];    /*ускорение обусловленное действием
									 давления Солнечного излучения*/
	double a_atmosphere[3];        /*ускорение обусловленное действием
									 атмосферы*/
	double a_traction[3];          /*ускорение обусловленное действием
									 двигательной установки*/

	/*Матрицы частных производных:*/
	double df_central_fild[3][3];     /*Матрица частных производных вектора
										гравитационных возмущений центрального
										тела по вектору положения*/
	double df_off_central_fild[3][3]; /*Матрица частных производных вектора
										гравитационных возмущений нецентрального
										поля центрального тела по вектору
										положения*/
	double df_celestial_bodies[3][3]; /*Матрица частных производных вектора
										гравитационных возмущений небесных тел
										по вектору положения*/
	double df_solar_radiation[3][3];	  /*Матрица частных производных вектора
										возмущений, обусловленных давлением
										солнечного излучения*/


	/* [ВЫЧИСЛЕНИЕ ПРАВЫХ ЧАСТЕЙ] */

	/*вычисление правых частей ДУ*/
	void rightPart(VECTOR &rv);

	/*вычисление возмущающего ускорения, обусловленного центральным
	  гавитационным полем Земли и матрицы частных производных этого вектора*/
	void central_field(VECTOR rv);

	/*вычисление возмущающего ускорения, обусловленного центральным
	  гавитационным полем Луны и матрицы частных производных этого вектора*/
	void central_field_moon(VECTOR rv);

	/*вычисление возмущающего ускорения обусловленного нецентральностью
	  гравитационного поля Земли и матрицы частных производных этого вектора*/
	void off_central_field(VECTOR rv);

	/*вычисление возмущающего ускорения обусловленного нецентральностью
	  гравитационного поля Луны и матрицы частных производных этого вектора*/
	void off_central_field_moon(VECTOR rv);


	/*вычисление возмущающего ускорения обусловленного нецентральностью
	  гравитационного поля Земли(второй зональной гармоникой - С20)*/
	void off_central_field_C20(VECTOR rv);

	/*вычисление возмущающего ускорения обусловленного нецентральностью
	  гравитационного поля Земли(второй зональной гармоникой - С40)*/
	void off_central_field_C40(VECTOR rv);


	/*вычисление возмущающего ускорения обусловленного нецентральностью
	  гравитационного поля Земли с учетом гармоник до 32х32 и матрицы частных
	  производных этого вектора*/
	void off_central_field_32(VECTOR rv, double df[3]);

	/*вычисление возмущающего ускорения обусловленного нецентральностью
	  гравитационного поля Луны с учетом гармоник до 75х75 и матрицы частных
	  производных этого вектора*/
	void off_central_field_75_moon(VECTOR rv, double df[3]);

	/*вычисление ускорения обусловленных действием небесных тел
	  (реализация для 10 небесных тел, центральное тело Земля) и матрицы частных
	  производных этого вектора*/
	void celestial_bodies(VECTOR rv);

    /*вычисление ускорения обусловленных действием небесных тел
	  (реализация для 10 небесных тел, центральное тело Луна) и матрицы частных
	  производных этого вектора*/
	void celestial_bodies_moon(VECTOR rv);

	/*вычисление ускорения обусловленного действием солнечного излучения и
	  матрицы частных производных этого вектора*/
	void solar_radiation(VECTOR rv);

	/*вычисление ускорения обусловленного воздействием силы сопротивления
	  атмосферы в соответствии с ГОСТ Р 25645.166-2004*/
	void atmosphere(VECTOR rv);

	/*вычисление ускорения обусловленного воздействием силы сопротивления
	  атмосферы в соответствии с ГОСТ Р 25645.166-2004*/
	void atmosphereGOST2004(VECTOR rv);

	/*вычисление ускорения обусловленного работой двигательной установки*/
	void traction(VECTOR rv);


};



};




#endif
