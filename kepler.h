//---------------------------------------------------------------------------

#ifndef keplerH
#define keplerH
//---------------------------------------------------------------------------
//Процедура перевода элементов орбиты в вектор состояния
void ElemToCoord(double Ar1[], double Ar2[]);
//---------------------------------------------------------------------------
//Процедура перевода элементов орбиты в вектор состояния
void ElemToCoord(double Ar1[], double r1[], double v1[]);
//---------------------------------------------------------------------------
//Процедура перевода вектора состояния в элементы орбиты
void CoordToElem(double Ar1[], double Ar2[]);
//---------------------------------------------------------------------------
//Процедура перевода вектора состояния в элементы орбиты
void CoordToElem(double r1[], double v1[], double Ar2[]);
//---------------------------------------------------------------------------
//Процедура нахождения u (аргумента широты в радианах) в зависимости от времени в секундах (t=0 - перицентр)
double PoiskU(const double &t, const double &a, const double &e, const double &omega);
//---------------------------------------------------------------------------
//Процедура нахождения времени(в сек от перицентра) по истинной аномалии и параметрам орбиты
double poisk_vrema(const double &teta, const double &a, const double &e);
//---------------------------------------------------------------------------
//Процедура определения положения аппарата при невозмущенном кеплеровом движении
void Kepler (double r[], double v[], double t);
//---------------------------------------------------------------------------
//Процедура определения положения аппарата при невозмущенном кеплеровом движении
void Kepler (double Elem[6], double t, double r[], double v[]);
#endif
