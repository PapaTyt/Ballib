//---------------------------------------------------------------------------


#pragma hdrstop

#include "integration.h"

//---------------------------------------------------------------------------

#pragma package(smart_init)


/*запись НУ*/
void chi::integration::set_NU(double r[3], double v[3], double t){
	/*
	 *Параметры:
	 * 	r[3]	- радиус вектор КА [км]
	 *	v[3] 	- вектор скорости КА [км/с]
	 *	t	 	- момент времени на который приведен вектор состояния в формате
				  Юлианской даты (UTC)
	 */
for(int i=0; i<3; i++){
	r_nu[i]=r[i];
	v_nu[i]=v[i];
}
t_nu=t;
}
void chi::integration::set_NU(double rv[6],double t){
	/*
	 *Параметры:
	 *	кv[6] 	- вектор состояния КА [км, км/с]
	 *	t	 	- момент времени на который приведен вектор состояния в формате
				  Юлианской даты (UTC)
	 */
for(int i=0; i<3; i++){
	r_nu[i]=rv[i];
	v_nu[i]=rv[i+3];
}
t_nu=t;
}
/*запись параметров интегрирования*/
void chi::integration::setParametrs(double interval_, double step_){
	/*
	 *Параметры:
	 * 	interval_ 	- интервал прогноза в днях
	 *	step_   	- шаг выдачи информации в секундах
	 Примечание:
		- Если не требуется вывод промежуточных результатов то следует задавать
		  шаг равный интервалу
	 */
interval=interval_;
step=step_;
}

























	/* [ВЫЧИСЛЕНИЕ ПРАВЫХ ЧАСТЕЙ] */

/*вычисление правых частей ДУ*/
void rightPart(VECTOR &rv){
/*
	 *  Параметры:
	 *   rv – структура типа VECTOR (вектор состояния и матрицы)
	 *
	 *  Примечания:
	 *    – 

	 *  Допустимые значения параметров
	 *
	 *   calculeteMatrix:
	 *		0 - расчет только возмущающих ускорений,
	 *		1 - расчет только возмущающих ускорений и 
				матрицы частных производных
	 *
	 *   centralBody:
	 *		B_EARTH - 0 – Земля;
	 *		B_MOON  - 1 – Луна;
	 *		B_SUN   - 2 – Солнце;
	 */


/*обнуление векторов ускорений*/
for(int i=0; i<3; i++){
	a_central_field[i]=0;
	a_off_central_field[i]=0;
	a_celestial_bodies[i]=0;
	a_solar_radiation[i]=0;
	a_atmosphere[i]=0;
	a_traction[i]=0;
}


/*вычисление ускорений*/
switch(centralBody){
	case B_EARTH:	if(rp[0]) central_field(rv);      	//центральное поле
					if(rp[1]) off_central_field(rv);    //нецентральность 
					if(rp[2]) celestial_bodies(rv);     //небесные тела
					if(rp[3]) solar_radiation(rv);      //солнечное излучение 
					if(rp[4]) atmosphere(rv);           //атмосфера
					if(rp[5]) traction(rv);             //тяга ДУ
					break;


	case B_MOON: 	if(rp[0]) central_field_moon(VECTOR rv);       //центральное поле
					if(rp[1]) off_central_field_moon(VECTOR rv);   //нецентральность 
					if(rp[2]) celestial_bodies_moon(VECTOR rv);    //небесные тела
					break;


	case B_SUN:     break;

}

/*суммирование расчитаных значений возмущающих ускорений*/
for (int i=0; i<3; i++){
	rv.f[i] = a_central_fild[i]+
			  a_off_central_fild[i]+
			  a_celestial_bodies[i]+
			  a_solar_pressure[i]+
			  a_atmosphere[i]+
			  a_traction[i];
}

/*расчет матрицы частных производных*/
if(calculeteMatrix){

	/*обнуление матрицы*/
	for(int i=0; i<6; i++)
		for(int j=0; j<6; j++)
			rv.dfdx[i][j]=0;
			
	/*задание единичных элементов*/
	rv.dfdx[0][3]=1;
	rv.dfdx[1][4]=1;
	rv.dfdx[2][5]=1;

	/*задание элементов матрицы из матрицы изохронных производных*/
	for(int i=0; i<3; i++)
		for(int j=0; j<3; j++)
			rv.dfdx[i+3][j]=df_central_fiеld[i][j]+
					   df_off_central_fiеld[i][j]+
					   df_celestial_bodies[i][j];

	matr_X_matr(rv.dfdx, rv.F, rv.F_);
}
}

/*вычисление возмущающего ускорения, обусловленного центральным
  гавитационным полем Земли и матрицы частных производных этого вектора*/
void central_field(VECTOR rv){
/*
	 *  Параметры:
	 *   rv – структура типа VECTOR (вектор состояния и матрицы)
	 *
	 *  Примечания:
	 *    – 

	 *  Допустимые значения параметров
	 *
	 *   calculeteMatrix:
	 *		0 - расчет только возмущающих ускорений,
	 *		1 - расчет только возмущающих ускорений и 
				матрицы частных производных
	 *

	 */

/*вычисление модуля радиус-вектора, второй и третей степени */
double R=norm(rv.r);
double R2=R*R;
double R3=R2*R;

/*вычисление возмущающего ускорения, обусловленного центральным
  гавитационным полем Земли*/
for (int k=0; k<3; k++)
	a_central_fiеld[k] =  - mu*rv.r[k]/R3;

/*вычисление матрица частных производных вектора гравитационных возмущений 
  центрального тела по вектору положения*/
if(calculeteMatrix){  
	for(int i=0;i<3;i++){
		for(int j=0; j<3;j++)
			df_central_field[i][j]=rv.r[i]*rv.r[j]/R2;
	}
	for(int i=0; i<3; i++)  df_central_fild[i][i]-=1./3.;
	for(int i=0; i<3;i++){
		for(int j=0; j<3; j++)
			df_central_field[i][j]*=3*mu/R3;
	}
}
}

/*вычисление возмущающего ускорения, обусловленного центральным
  гавитационным полем Луны и матрицы частных производных этого вектора*/
void central_field_moon(VECTOR rv){
/*
	 *  Параметры:
	 *   rv – структура типа VECTOR (вектор состояния и матрицы)
	 *
	 *  Примечания:
	 *    – 

	 *  Допустимые значения параметров
	 *
	 *   calculeteMatrix:
	 *		0 - расчет только возмущающих ускорений,
	 *		1 - расчет только возмущающих ускорений и 
				матрицы частных производных
	 *

	 */

/*вычисление модуля радиус-вектора, второй и третей степени */
double R=norm(rv.r);
double R2=R*R;
double R3=R2*R;

/*вычисление возмущающего ускорения, обусловленного центральным
  гавитационным полем Земли*/
for (int k=0; k<3; k++)
	a_central_fiеld[k] =  - mum*rv.r[k]/R3;

/*вычисление матрица частных производных вектора гравитационных возмущений 
  центрального тела по вектору положения*/
if(calculeteMatrix){  
	for(int i=0;i<3;i++){
		for(int j=0; j<3;j++)
			df_central_field[i][j]=rv.r[i]*rv.r[j]/R2;
	}
	for(int i=0; i<3; i++)  df_central_fild[i][i]-=1./3.;
	for(int i=0; i<3;i++){
		for(int j=0; j<3; j++)
			df_central_field[i][j]*=3*mum/R3;
	}
}
}

/*вычисление возмущающего ускорения обусловленного нецентральностью
  гравитационного поля Земли и матрицы частных производных этого вектора*/
void off_central_field(VECTOR rv){
/*
	 *  Параметры:
	 *   rv – структура типа VECTOR (вектор состояния и матрицы)
	 *
	 *  Примечания:
	 *    – 

	 *  Допустимые значения параметров
	 *
	 *   calculeteMatrix:
	 *		0 - расчет только возмущающих ускорений,
	 *		1 - расчет только возмущающих ускорений и 
				матрицы частных производных
	 *

	 */



if(HarmonicsOrder==0) off_central_fild_C20(rv);
else off_central_fild_32(rv);

VECTOR temp;
temp=rv;

double df[3];
double delta=0.01;

for(int i=0; i<3; i++){

	temp=rv;
	temp.r[i]+=delta;
	off_central_fild_32(temp,df);

	for(int j=0; j<3; j++) df_off_central_fild[i][j]=df[j];

	temp=rv;
	temp.r[i]-=delta;
	off_central_fild_32(temp,df);

	for(int j=0; j<3; j++) df_off_central_fild[i][j]-=df[j];

	for(int j=0; j<3; j++) df_off_central_fild[i][j]/=2*delta;

}





}

	/*вычисление возмущающего ускорения обусловленного нецентральностью
	  гравитационного поля Луны и матрицы частных производных этого вектора*/
	void off_central_field_moon(VECTOR rv);


	/*вычисление возмущающего ускорения обусловленного нецентральностью
	  гравитационного поля Земли(второй зональной гармоникой - С20)*/
	void off_central_field_C20(VECTOR rv);

	/*вычисление возмущающего ускорения обусловленного нецентральностью
	  гравитационного поля Земли(второй зональной гармоникой - С40)*/
	void off_central_field_C40(VECTOR rv);


	/*вычисление возмущающего ускорения обусловленного нецентральностью
	  гравитационного поля Земли с учетом гармоник до 32х32 и матрицы частных
	  производных этого вектора*/
	void off_central_field_32(VECTOR rv, double df[3]);

	/*вычисление возмущающего ускорения обусловленного нецентральностью
	  гравитационного поля Луны с учетом гармоник до 75х75 и матрицы частных
	  производных этого вектора*/
	void off_central_field_75_moon(VECTOR rv, double df[3]);

	/*вычисление ускорения обусловленных действием небесных тел
	  (реализация для 10 небесных тел, центральное тело Земля) и матрицы частных
	  производных этого вектора*/
	void celestial_bodies(VECTOR rv);

    /*вычисление ускорения обусловленных действием небесных тел
	  (реализация для 10 небесных тел, центральное тело Луна) и матрицы частных
	  производных этого вектора*/
	void celestial_bodies_moon(VECTOR rv);

	/*вычисление ускорения обусловленного действием солнечного излучения и
	  матрицы частных производных этого вектора*/
	void solar_radiation(VECTOR rv);

	/*вычисление ускорения обусловленного воздействием силы сопротивления
	  атмосферы в соответствии с ГОСТ Р 25645.166-2004*/
	void atmosphere(VECTOR rv);

	/*вычисление ускорения обусловленного воздействием силы сопротивления
	  атмосферы в соответствии с ГОСТ Р 25645.166-2004*/
	void atmosphereGOST2004(VECTOR rv);

	/*вычисление ускорения обусловленного работой двигательной установки*/
	void traction(VECTOR rv);
