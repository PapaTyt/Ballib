#pragma once
#ifndef dephemH
#define dephemH

#include <stdio.h>
#include <string.h>
#include <stdint.h>
#include <exception>
#include <limits>
#include <string>

class dephem
{
	class de_exception;

	static const size_t MAX_LONG;

public:
	static const unsigned int USE_EXCEPTION = 0x1;
	static const unsigned int NO_CHECK      = 0x2;

private:
	std::string file_path;
	
	FILE* eph;

	mutable unsigned int option;

	bool ready;

	struct header_info
	{				
		size_t		block_count;
		size_t		ncoeff;
		uint32_t	const_count;
		int			denum;
		uint32_t	key[15][3];
		double		start;
		double		end;
		double		span;
		double		au;
		double		emrat;
		
		char label[3][85];

	private:
		friend class dephem;

		char	const_name[1000][6];
		double*	const_value;

		double   co_em;
		double   co_span;
		uint32_t max_cheby;
		int      items;
		int	     derived_items;

	} Info;	

	mutable const double* buffer;

	double* poly;
	double* dpoly;

public:
	explicit dephem(const char* file_path, unsigned int option = 0);

	dephem(const dephem& other);

	dephem(dephem&& other);
	
	dephem& operator = (const dephem& other);

	~dephem();

    const header_info* const info;

	bool is_ready() const { return ready; }

	double get_const(const char* const_name) const;

	void available_items(bool* items, bool derived = false) const;

	void get_coeff(double* coeff, double JED) const;

	void throw_error(const char* message) const;

private:

	void copy(const dephem& other);

	void move_swap(dephem& other);

	bool read();

	void post_read_calc();

	bool authentic() const;	

	void fill_buffer(size_t block_num) const;
	
	void interpolate(const double* set, unsigned item, double norm_time, double* res, unsigned comp_count) const;

	void interpolate_derivative(const double* set, unsigned item, double norm_time, double* res, unsigned comp_count) const;

	void get_origin_item(unsigned item, double JED, double* S, bool state) const;

	void get_origin_earth(double JED, double* S, bool state) const;
	
	void get_origin_moon (double JED, double* S, bool state) const;

public:

	void get_body(unsigned target, unsigned center, double JED, double* S, bool state) const;

	void get_other(unsigned item, double JED, double* res, bool state) const;
};

class dephem::de_exception : public std::exception
{
	const char* msg;

public:
	de_exception(const char* msg) throw(){this->msg = msg;}
	const char* what() const throw() { return msg;}
};

#endif