//---------------------------------------------------------------------------

#ifndef matrixH
#define matrixH
#include <vcl.h>
#include <vector>
//---------------------------------------------------------------------------
//процедура умножения матрицы A 3х3 на вектор r
void matr_X_vect(double A[3][3], double r[3], double r1[3]);
//процедура умножения матрицы A 3х3 на матрицу 3х3 B
void matr_X_matr(double A[3][3], double B[3][3], double C[3][3]);
//процедура транспонирования матрицы А 3х3
void matr_T(const double A[3][3], double B[3][3]);
//процедура преобразование матрицы в кватернион
void MatrToQ(const double a[3][3], double q[4]);
//процедура преобразования кватерниона в матрицу
void QToMatr(const double q[4], double a[3][3]);
//Определение матрицы поворота вокруг одной из осей СК на заданный угол
void RotMat(int i, double a, double A[3][3]);
 //вектора и матрицы 6х6
//---------------------------------------------------------------------------
//процедура обнулени¤ 6-ти мерного вектора
void vect_zero(double X[6]);
//---------------------------------------------------------------------------
//процедура записи вектора Х в вектор Y
void vect_copy(double X[6], double Y[6]);
//---------------------------------------------------------------------------
//вычитание из 6-ти мерного вектора 6-ти мерного вектора
void vect_minus(double X[6], double Y[6], double Z[6]);
//---------------------------------------------------------------------------
//вычитание из 6-ти мерного вектора 6-ти мерного вектора
void vect_minus(double X[6], double Y[6]);
//сложение 6-ти мерного вектора с 6-ти мерным вектором
void vect_add(double A[6], double B[6], double Z[6]);
//---------------------------------------------------------------------------
//сложение 6-ти мерного вектора с 6-ти мерным вектором
void vect_add(double A[6], double B[6]);
//---------------------------------------------------------------------------
//умножение вектора на число
void vect_x_n(double X[6], double n, double Y[6]);
//---------------------------------------------------------------------------
//умножение вектора на число
void vect_x_n(double X[6], double n);
//---------------------------------------------------------------------------
//процедура обнуления матрицы 6х6
void matr_zero(double A[6][6]);
//---------------------------------------------------------------------------
//процедура записи матрицы А 6х6 в матрицу В 6х6
void matr_copy(double A[6][6], double B[6][6]);
//---------------------------------------------------------------------------
//вычитание матрицы 6х6 из матрицы 6х6
void matr_minus(double A[6][6], double B[6][6], double C[6][6]);
//---------------------------------------------------------------------------
//вычитание матрицы 6х6 из матрицы 6х6
void matr_minus(double A[6][6], double B[6][6]);
//---------------------------------------------------------------------------
//сложение матрицы 6х6 с матрицей 6х6
void matr_add(double A[6][6], double B[6][6], double C[6][6]);
//---------------------------------------------------------------------------
//сложение матрицы 6х6 с матрицей 6х6
void matr_add(double A[6][6], double B[6][6]);
//---------------------------------------------------------------------------
//умножение матрицы 6х6 на число
void matr_X_n(double A[6][6], double n, double B[6][6]);
//---------------------------------------------------------------------------
//умножение матрицы 6х6 на число
void matr_X_n(double A[6][6], double n);
//---------------------------------------------------------------------------
//процедура умножение матрицы A 6х6 на вектор X 6х1
void matr_X_vect(double A[6][6], double X[6], double Y[6]);
//---------------------------------------------------------------------------
//процедура умножение вектор X 1х6 на матрицу A 6х6
void vect_X_matr(double X[6], double A[6][6], double Y[6]);
//---------------------------------------------------------------------------
//процедура умножени¤ матрицы A 6х6 на матрицу B 6х6
void matr_X_matr(double A[6][6], double B[6][6], double C[6][6]);
//---------------------------------------------------------------------------
//процедура умножени¤ матрицы A 6х6 на матрицу B 6х6
void matr_X_matr(double A[6][6], double B[6][6]);
//---------------------------------------------------------------------------
//процедура транспонировани¤ матрицы A 6х6
void matr_T(double A[6][6], double B[6][6]) ;
//---------------------------------------------------------------------------
//процедура транспонировани¤ матрицы A 6х6
void matr_T(double A[6][6]);
//---------------------------------------------------------------------------
//обращение матрицы 6x6
void inversion(double A[6][6]);
//---------------------------------------------------------------------------


class matrix{
	public:

	//вектор столбец
	std::vector<double> X;
	//вектор строка
	std::vector<double> Y;

	//количество строк n
	int n;
	//количество столбцов m
	int m;
	//матрица nxm
	std::vector< std::vector<double> > A;

	//---------------------------------------------------------------------------
	//процедура инициализации матрицы nxm
	void matrix::create_A(int n_, int m_);
	//---------------------------------------------------------------------------
	//процедура инициализации вектора столбца
	void matrix::create_X(int n_);
	//---------------------------------------------------------------------------
	//процедура инициализации вектора строки
	void matrix::create_Y(int m_);
	//---------------------------------------------------------------------------
	//процедура обнуления матрицы nxm
	void matrix::zero_A();
	//---------------------------------------------------------------------------
	//процедура обнуления матрицы nxm
	void matrix::zero_X();
	//---------------------------------------------------------------------------
	//процедура обнуления матрицы nxm
	void matrix::zero_A();
	//---------------------------------------------------------------------------
	//процедура инициализации диагональной матрицы
	void diagonal_matrix();
	//---------------------------------------------------------------------------
	//процедура инициализации единичной матрицы
	void identity_matrix();
    //процедура сложения матриц A=A+B
	void add_A(matrix B);
	//---------------------------------------------------------------------------
	//процедура сложения векторов столбцов X=X+B.X
	void add_X(matrix B);
	//---------------------------------------------------------------------------
	//процедура сложения векторов столбцов Y=Y+B.Y
	void add_Y(matrix B);
    //---------------------------------------------------------------------------
	//процедура вычитания матриц A=A-B.A
	void matrix::minus_A(matrix B);
	//---------------------------------------------------------------------------
	//процедура вычитания векторов столбцов X=X-B.X
	void matrix::minus_X(matrix B);
	//---------------------------------------------------------------------------
	//процедура вычитания векторов столбцов Y=Y-B.Y
	void matrix::minus_Y(matrix B);
    //---------------------------------------------------------------------------
	//процедура умножения матрицы на число A=k*A
	void matrix::multiplication_A(double k);
	//---------------------------------------------------------------------------
	//процедура вычитания векторов столбцов X=k*X
	void matrix::multiplication_X(double k);
	//---------------------------------------------------------------------------
	//процедура вычитания векторов столбцов Y=k*Y
	void matrix::multiplication_Y(double k);
    //---------------------------------------------------------------------------
	//процедура транспонирования матрицы A=A^T
	void matrix::transposition_A();
	//---------------------------------------------------------------------------
	//процедура транспонирования  векторов столбцов Y=X^T
	void matrix::transposition_X();
	//---------------------------------------------------------------------------
	//процедура транспонирования  векторов столбцов X=Y^T
	void matrix::transposition_Y();
	//---------------------------------------------------------------------------
	//процедура умножения матрицы на матрицу слева A=B*A
	void matrix::left_multiplication(matrix B);
	//---------------------------------------------------------------------------
	//процедура умножения матрицы на матрицу справа A=A*B
	void matrix::right_multiplication(matrix B);
    //---------------------------------------------------------------------------
	//процедура умножения матрицы на вектор столбец A=A*X
	void matrix::multiplication_X(matrix B);
	//---------------------------------------------------------------------------
	//процедура умножения матрицы на вектор строку A=Y*A
	void matrix::multiplication_Y(matrix B);

	//privete
	protected:


}:




#endif
